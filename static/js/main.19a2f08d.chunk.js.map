{"version":3,"sources":["components/Waveform.jsx","components/ExperimentsTable.jsx","App.jsx","reportWebVitals.ts","index.jsx"],"names":["Waveform","url","title","handleFinish","waveformRef","useRef","wavesurfer","useState","playing","setPlay","useEffect","options","container","current","waveColor","progressColor","cursorColor","barWidth","barHeight","maxCanvasWidth","responsive","height","partialRender","WaveSurfer","create","load","on","setVolume","play","destroy","className","id","onClick","playPause","ref","axiosConfig","ColumnManager","getToggleHideAllColumnsProps","allColumns","setColumnOrder","stateCols","setState","sortColumns","columns","filter","c","isGrouped","isVisible","type","style","display","onChange","checked","onDragEnd","result","destination","index","source","list","startIndex","endIndex","Array","from","splice","removed","reorder","map","droppableId","provided","innerRef","droppableProps","column","draggableId","draggableProps","dragHandleProps","getToggleHiddenProps","Header","placeholder","GlobalFilter","globalFilter","setGlobalFilter","React","value","setValue","useAsyncDebounce","undefined","e","target","fontSize","AudioRow","memo","row","colSpan","original","audiosURLs","setAudiosUrls","getRowProps","x","i","splitedPath","split","length","indexOf","document","getElementById","click","initialGroupBy","initialVisibleColumns","axios","get","then","resp","push","data","groupBy","Table","inputColumns","initialHidden","toUpperCase","includes","useTable","initialState","hiddenColumns","useColumnOrder","useGlobalFilter","useGroupBy","useSortBy","useExpanded","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","audioRowRenderer","useCallback","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","top","left","width","render","toggleHidden","color","isSortedDesc","canGroupBy","getGroupByToggleProps","Fragment","cells","cell","getCellProps","isAggregated","isPlaceholder","getToggleRowExpandedProps","isExpanded","subRows","some","key","ExperimentsTable","setColumns","setData","response","Set","forEach","item","Object","keys","val","add","name","accessor","unshift","Cell","hasOwnProperty","audios","toString","exp","memoColumns","useMemo","memoData","Modal","preventDefault","onClose","this","props","isOpen","children","close","Component","App","withInfos","setInfos","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.19a2f08d.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\nimport WaveSurfer from \"wavesurfer.js\";\n\nconst waveSurferOptions = ref => ({\n    container: ref,\n    waveColor: \"lightgray\",\n    progressColor: \"#6996e6\",\n    cursorColor: \"#6996e6\",\n    barWidth: 1,\n    barHeight: 4,\n    maxCanvasWidth: 200,\n    responsive: true,\n    height: 50,\n    // Use the PeakCache to improve rendering speed of large waveforms.\n    partialRender: false\n});\n\nexport default function Waveform({url, title, handleFinish}) {\n    const waveformRef = useRef(null);\n    const wavesurfer = useRef(null);\n    const [playing, setPlay] = useState(false);\n\n    // create new WaveSurfer instance\n    // On component mount and when url changes\n    useEffect(() => {\n        setPlay(false);\n\n        const options = waveSurferOptions(waveformRef.current);\n        wavesurfer.current = WaveSurfer.create(options);\n\n        wavesurfer.current.load(url);\n\n        wavesurfer.current.on(\"ready\", function () {\n            if (wavesurfer.current) {\n                wavesurfer.current.setVolume(0.5);\n            }\n        wavesurfer.current.on(\"seek\", () => {\n            setPlay(true);\n            wavesurfer.current.play()\n        });\n        wavesurfer.current.on(\"finish\", () => {\n            handleFinish()\n            setPlay(false)\n        });\n        });\n        // Removes events, elements and disconnects Web Audio nodes.\n        // when component unmount\n        return () => wavesurfer.current.destroy();\n    }, [url, handleFinish]);\n\n    const handlePlayPause = () => {\n        setPlay(!playing);\n        wavesurfer.current.playPause();\n    };\n\n    return (\n        // the container\n        <div className={\"waveform-element\"}>\n            {/* the header */}\n            <div className={\"waveform-header\"}>\n                <i className={\"play-button fa \" + (playing ? \"fa-pause-circle\" : \"fa-play-circle-o\")}\n                   id={`play-${title}`}\n                   onClick={handlePlayPause}>\n                </i>\n                <span className={\"waveform-title\"}>\n                {\"  \" + title}\n                </span>\n            </div>\n            {/* the waveform (ui kit must be turned off for it to display correctly) */}\n            <div className={\"waveform\"}\n                 ref={waveformRef}>\n            </div>\n        </div>\n    );\n}","import React, {useMemo, useState, useEffect} from \"react\";\nimport {\n    useTable,\n    useSortBy,\n    useExpanded,\n    useGroupBy,\n    useColumnOrder,\n    useGlobalFilter,\n    useAsyncDebounce\n} from 'react-table';\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\nimport Waveform from \"./Waveform\";\nimport axios from \"axios\";\nimport '../App.scss';\n\nconst axiosConfig = {\"headers\": {\"Cache-Control\": \"no-store, no-cache\"}};\n\nfunction ColumnManager({getToggleHideAllColumnsProps, allColumns, setColumnOrder}) {\n    const [stateCols, setState] = useState([]);\n\n    const reorder = (list, startIndex, endIndex) => {\n        const result = Array.from(list);\n        if (result[startIndex].isGrouped) {\n            return result\n        }\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n        return result;\n    };\n\n    const sortColumns = (columns) => {\n        // console.log(columns.filter(c => c.isGrouped).length);\n        return [\n            ...columns.filter(c => c.isGrouped),\n            ...columns.filter(c => c.isVisible && !c.isGrouped),\n            ...columns.filter(c => !c.isVisible)\n        ]\n    };\n\n    useEffect(() => {\n        // console.log(\"SETTING STATE:\", sortColumns(allColumns).map(c => c.id));\n        setState(sortColumns(allColumns));\n    }, [allColumns, setColumnOrder]);\n\n    function onDragEnd(result) {\n        if (!result.destination) {\n            return;\n        }\n\n        if (result.destination.index === result.source.index) {\n            return;\n        }\n        const columns = reorder(\n            stateCols,\n            result.source.index,\n            result.destination.index\n        );\n        // console.log(\"REORDERED:\", sortColumns(columns).map(c => c.id));\n        setColumnOrder(sortColumns(columns).map(c => c.id));\n    }\n\n    return (\n        <div className={\"column-manager\"}>\n            <div className={\"content\"}>\n                <div className={\"column-toggle\"}>\n                    <label>\n                        <input type=\"checkbox\" style={{display: 'none'}}\n                               onChange={getToggleHideAllColumnsProps().onChange}>\n                        </input><i\n                        className={\"fa \" + (getToggleHideAllColumnsProps().checked ? \"fa-eye\" : \"fa-eye-slash\")}>{' '}</i>\n                        <span className={\"column-name\"}>{\"All columns\"}</span>\n                    </label>\n                </div>\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <Droppable droppableId={\"list\"}>\n                        {provided => (\n                            <div ref={provided.innerRef} {...provided.droppableProps}>\n                                {stateCols.map((column, index) => (\n\n                                    <Draggable key={column.id} index={index} draggableId={column.id}>\n                                        {provided => (\n                                            <div className={\"column-toggle\"}>\n                                                <label\n                                                    ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                                    <input type=\"checkbox\" style={{display: 'none'}}\n                                                           onChange={column.getToggleHiddenProps().onChange}>\n                                                    </input><i\n                                                    className={\"fa \" + (column.isVisible ? \"fa-eye\" : \"fa-eye-slash\")}>{' '}</i>\n                                                    <span className={\"column-name\"}>{column.Header}</span>\n                                                </label>\n                                            </div>)}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            </div>\n        </div>\n    )\n}\n\n// simple filter\nfunction GlobalFilter({\n                          globalFilter,\n                          setGlobalFilter,\n                      }) {\n    const [value, setValue] = React.useState(globalFilter);\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200);\n\n    return (\n        <div className={\"search-bar\"}>\n            <input\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`Search : ...`}\n                style={{\n                    fontSize: '1.1rem',\n                }}\n            />\n        </div>\n    )\n}\n\nconst AudioRow = React.memo(({row, colSpan}) => {\n    // console.log(row.getRowProps());\n    const [audiosURLs, setAudiosUrls] = React.useState(row.original[\"audios\"]);\n    React.useEffect(() => setAudiosUrls(row.original[\"audios\"]), [row]);\n    return <tr {...row.getRowProps()}>\n        <td colSpan={colSpan} className={\"audio-container\"}>\n            {audiosURLs ?\n                audiosURLs.map((x, i) => {\n                    const splitedPath = x.split(\"/\");\n                    return <Waveform\n                        key={x}\n                        url={x}\n                        title={splitedPath[splitedPath.length - 1]}\n                        handleFinish={() => {\n                            const list = audiosURLs;\n                            const index = list.indexOf(x) + 1;\n                            if (index < list.length) {\n                                const id = list[index].split(\"/\")[splitedPath.length - 1];\n                                const element = document.getElementById(\"play-\" + id);\n                                element.click()\n                            }\n                        }}\n                    />\n                })\n                : <span style={{fontSize: \"x-large\"}}>No audio...</span>}\n        </td>\n    </tr>\n});\nconst initialGroupBy = [];\nconst initialVisibleColumns = [\"Audios\"];\naxios.get(\"config.json\", axiosConfig).then(resp => {\n    initialVisibleColumns.push(...resp.data.columns);\n    initialGroupBy.push(...resp.data.groupBy);\n});\n\nconst Table = ({inputColumns, data}) => {\n    const initialHidden = inputColumns.filter(\n        c => c.id.toUpperCase() !== c.id && !initialVisibleColumns.includes(c.Header))\n        .map(c => c.id);\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        allColumns,\n        getToggleHideAllColumnsProps,\n        setColumnOrder,\n        state,\n        setGlobalFilter\n    } = useTable({\n            columns: inputColumns, data,\n            initialState: {\n                groupBy: initialGroupBy,\n                hiddenColumns: initialHidden\n            }\n        },\n        useColumnOrder,\n        useGlobalFilter,\n        useGroupBy,\n        useSortBy,\n        useExpanded,\n    );\n    const audioRowRenderer = React.useCallback(\n        ({row, colSpan}) => (\n            <AudioRow row={row} colSpan={colSpan}/>\n        ),\n        []\n    );\n\n    return (\n        <>\n            <div className={\"control-panel\"}>\n                {/* Global Filter */}\n                <ColumnManager getToggleHideAllColumnsProps={getToggleHideAllColumnsProps}\n                               allColumns={allColumns}\n                               setColumnOrder={setColumnOrder}\n                />\n                <GlobalFilter\n                    globalFilter={state.globalFilter}\n                    setGlobalFilter={setGlobalFilter}\n                />\n                <br/>\n                {/*<div style={{margin: \"auto\", width: \"max-content\"}}>Displaying {rows.length} results</div>*/}\n            </div>\n            {/*<pre>{JSON.stringify(state, null, 2)}</pre>*/}\n            {/* The Table */}\n            <br/>\n            <table {...getTableProps()}>\n                <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                {column.id === \"expander\" ?\n                                    <span className={\"column-title\"}\n                                          style={{\n                                              top: \"-1%\",\n                                              left: \"5%\",\n                                              width: \"100px\"\n                                          }}>{column.render('Header')}</span>\n                                    : <div className={\"header-element\"}>\n                                        <span className={\"column-title\"}>{column.render('Header')}</span>\n                                        {/* Add a sort direction indicator */}\n                                        <span className={\"column-icons\"}>\n                                            <i className={\"fa fa-close\"}\n                                               onClick={() => column.toggleHidden(true)}\n                                               style={{color: \"#919191\", width: \"16px\"}}\n                                            />\n                                            <i className={\"fa fa-chevron-up\"}\n                                               style={{\n                                                   color: column.isSortedDesc === undefined ? \"#919191\" : (column.isSortedDesc ? \"green\" : '#919191'),\n                                               }}/>\n                                            <i className={\"fa fa-chevron-down\"}\n                                               style={{\n                                                   color: column.isSortedDesc === undefined ? \"#919191\" : (!column.isSortedDesc ? \"green\" : '#919191'),\n                                               }}/>\n                                            {column.canGroupBy ? (\n                                                // If the column can be grouped, let's add a toggle\n                                                <i {...column.getGroupByToggleProps()}\n                                                   className={\"fa fa-indent\"}\n                                                   style={{\n                                                       color: column.isGrouped ? \"green\" : '#919191',\n                                                   }}/>\n                                            ) : null}\n                                        </span>\n                                    </div>\n                                }\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                {rows.map(\n                    (row, i) => {\n                        prepareRow(row);\n                        return (\n                            <React.Fragment key={row.getRowProps().key}>\n                                {/* first we display the params of the experiment */}\n                                <tr {...row.getRowProps()}>\n                                    {row.cells.map(cell => {\n                                        return (\n                                            <td\n                                                {...cell.getCellProps()}\n                                                className={(cell.isGrouped\n                                                    ? \"grouped-\"\n                                                    : cell.isAggregated\n                                                        ? \"aggregated-\"\n                                                        : cell.isPlaceholder\n                                                            ? \"placeholder-\" : \"\") + \"cell\"}>\n                                                {cell.isGrouped ? (\n                                                    // If it's a grouped cell, add an expander and row count\n                                                    <>\n                                                  <span {...row.getToggleRowExpandedProps()}>\n                                                    {row.isExpanded ? <i className={\"fa fa-chevron-down\"}/> :\n                                                        <i className={\"fa fa-chevron-right\"}/>}\n                                                  </span>{' '}\n                                                        {cell.render('Cell')} ({row.subRows.length})\n                                                    </>\n                                                ) : cell.isAggregated ? (\n                                                    // If the cell is aggregated, use the Aggregated\n                                                    // renderer for cell\n                                                    cell.render('Aggregated')\n                                                ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                                                    // Otherwise, just render the regular cell\n                                                    cell.render('Cell')\n                                                )}\n                                            </td>\n                                        )\n                                    })}\n                                </tr>\n                                {/*then the audios if the row is expanded */}\n                                {(row.isExpanded && !row.cells.some(cell => cell.isGrouped)) &&\n                                audioRowRenderer({row: row, colSpan: allColumns.length})\n                                }\n                            </React.Fragment>\n                        )\n                    }\n                )}\n                </tbody>\n            </table>\n        </>\n    )\n};\n\nexport default function ExperimentsTable() {\n    const [columns, setColumns] = useState([]);\n    const [data, setData] = useState([]);\n    useEffect( () => {\n        axios.get(\"experiments.json\", axiosConfig).then (response =>{\n            // columns are dynamically defined so we need the set of\n            // keys in all the experiments\n            let columns = new Set();\n            response.data.forEach(\n                item => Object.keys(item).forEach(val => {\n                    if (![\"_id\", \"audios\"].includes(val)) {\n                        columns.add(val)\n                    }\n                }));\n            columns = Array.from([...columns]);\n            // format and prepend extra columns for the UI\n            columns = columns.map(name => {\n                return {Header: name, accessor: name, id: name}\n            });\n            // column for expanding/collapsing audios\n            columns.unshift({\n                Header: \"Audios\",\n                id: 'expander',\n                Cell: ({row}) => (\n                    <span {...row.getToggleRowExpandedProps()} className={\"grouped-column\"}>\n                            {row.isExpanded ?\n                                <i className={\"fa fa-chevron-down\"}/>\n                                : <i className={\"fa fa-chevron-right\"}/>}\n                        {(!row.cells.some(cell => cell.isGrouped) && row.original.hasOwnProperty(\"audios\")) ?\n                            ` (${row.original.audios.length.toString()})`\n                            : null}\n                        </span>\n                )\n            });\n            setColumns(columns);\n            setData(response.data);\n        })\n    }, []);\n    const audios = {};\n    data.forEach(exp => audios[exp.id] = exp.audios);\n    const memoColumns = useMemo(() => columns, [columns]);\n    const memoData = useMemo(() => data, [data]);\n    // console.log(memoColumns);\n\n    return (\n        <Table inputColumns={memoColumns} data={memoData}/>\n    )\n}","import React from \"react\";\nimport \"./App.scss\";\n\nimport ExperimentsTable from \"./components/ExperimentsTable\";\n\nclass Modal extends React.Component {\n    close(e) {\n        e.preventDefault();\n        const {onClose} = this.props;\n        if (onClose) {\n            onClose();\n        }\n    }\n\n    render() {\n        const {isOpen, children} = this.props;\n        if (isOpen === false) return null;\n\n        return (\n            <>\n                <div className={\"info-modal\"}>{children}</div>\n                <div className=\"bg\" onClick={e => this.close(e)}/>\n            </>\n        );\n    }\n}\n\nexport default function App() {\n    const [withInfos, setInfos] = React.useState(false);\n    return (\n        <div className={\"App\"}>\n            <div className={\"header\"}>\n                <h3 id={\"logo\"}>\n                    {\"< a u d i o - e X p e r i m e n t - e X p l o r e r >\"}\n                </h3>\n                <i className={\"fa fa-info-circle\"}\n                   onClick={() => setInfos(true)}>\n                </i>\n                {withInfos ?\n                    <Modal isOpen={withInfos} onClose={() => setInfos(false)}>\n                        <h4>What is this?</h4>\n                        <p>This is a prototype for a web-based visualization tool.</p>\n                        <p><code>aXX</code> allows you to explore the relationship between the parameters of Machine Learning models that generate sound and the sounds they actually generate.</p>\n                        <h4>How does it work?</h4>\n                        <p>You can drag-and-drop the names of the columns in the list at the top to reorder the columns in the table.</p>\n                        <p>Click on the <i className={\"fa fa-eye\"}/> to toggle the columns' visibility.</p>\n                        <p>At the bottom of the columns' icons (in their headers), click on <i className={\"fa fa-indent\"}/> to group the rows by the distinct values of that column.</p>\n                        <p>In the \"Audios\" column, click on <i className={\"fa fa-chevron-right\"}/> to display (and play!) what the models generated.</p>\n                        <h4>Where do the sounds come from?</h4>\n                        <p>All the sounds & experiments shown on this page have been made by the group k-tonal (website coming soon!) with their own <a href={\"https://github.com/k-tonal/mimikit\"}>mimikit</a>, a python package for doing deep-learning with your own audios.</p>\n                    </Modal>\n                    : null}\n            </div>\n            <ExperimentsTable/>\n        </div>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}